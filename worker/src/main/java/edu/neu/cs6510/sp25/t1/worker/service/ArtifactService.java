package edu.neu.cs6510.sp25.t1.worker.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.UUID;
import java.util.List;

/**
 * Service for processing and storing job artifacts.
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class ArtifactService {
    // Base path for storing artifacts
    private final String artifactStoragePath = "./artifacts";

    /**
     * Processes artifacts generated by a job and stores them.
     *
     * @param jobId The job execution ID
     * @param sourceDir The source directory containing artifacts
     * @param artifactPatterns List of patterns specifying which files to treat as artifacts
     */
    public void processArtifacts(UUID jobId, String sourceDir, List<String> artifactPatterns) {
        if (artifactPatterns == null || artifactPatterns.isEmpty()) {
            return;
        }

        try {
            // Create storage directory for this job
            String destinationDir = artifactStoragePath + "/" + jobId;
            Path destPath = Paths.get(destinationDir);
            Files.createDirectories(destPath);

            // Process each artifact pattern
            for (String pattern : artifactPatterns) {
                try {
                    processArtifactPattern(pattern, sourceDir, destinationDir);
                } catch (IOException e) {
                    log.error("Failed to process artifact pattern {}: {}", pattern, e.getMessage());
                }
            }

            log.info("Successfully processed artifacts for job {}", jobId);
        } catch (IOException e) {
            log.error("Failed to create artifact directory for job {}: {}", jobId, e.getMessage());
        }
    }

    /**
     * Processes a single artifact pattern and copies matching files.
     *
     * @param pattern Artifact pattern
     * @param sourceDir Source directory
     * @param destDir Destination directory
     * @throws IOException If file operations fail
     */
    private void processArtifactPattern(String pattern, String sourceDir, String destDir) throws IOException {
        // Simplified implementation - actual implementation should handle glob patterns
        Path sourcePath = Paths.get(sourceDir, pattern);
        if (Files.exists(sourcePath)) {
            if (Files.isDirectory(sourcePath)) {
                // Handle directory copy
                copyDirectory(sourcePath, Paths.get(destDir, sourcePath.getFileName().toString()));
            } else {
                // Handle file copy
                Path destFile = Paths.get(destDir, sourcePath.getFileName().toString());
                Files.copy(sourcePath, destFile, StandardCopyOption.REPLACE_EXISTING);
                log.debug("Copied artifact: {} -> {}", sourcePath, destFile);
            }
        } else {
            log.warn("Artifact pattern did not match any files: {}", pattern);
        }
    }

    /**
     * Recursively copies a directory and its contents.
     *
     * @param source Source directory
     * @param destination Destination directory
     * @throws IOException If directory operations fail
     */
    private void copyDirectory(Path source, Path destination) throws IOException {
        Files.createDirectories(destination);

        Files.list(source).forEach(path -> {
            try {
                Path destPath = destination.resolve(source.relativize(path));
                if (Files.isDirectory(path)) {
                    copyDirectory(path, destPath);
                } else {
                    Files.copy(path, destPath, StandardCopyOption.REPLACE_EXISTING);
                }
            } catch (IOException e) {
                log.error("Failed to copy directory entry: {}", e.getMessage());
            }
        });
    }
}