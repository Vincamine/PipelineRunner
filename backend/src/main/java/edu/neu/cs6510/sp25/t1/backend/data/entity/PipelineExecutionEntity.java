package edu.neu.cs6510.sp25.t1.backend.data.entity;

import java.time.Instant;
import jakarta.persistence.*;
import edu.neu.cs6510.sp25.t1.common.enums.ExecutionStatus;
import java.util.List;

/**
 * Represents a specific execution of a pipeline.
 */
@Entity
@Table(name = "pipeline_executions")
public class PipelineExecutionEntity {
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;  // Unique database ID

  @Column(nullable = false, unique = true)
  private String runId;  // Run ID generated by CLI (UUID)

  @ManyToOne(fetch = FetchType.LAZY)
  @JoinColumn(name = "pipeline_name", referencedColumnName = "name", nullable = false)
  private PipelineEntity pipeline;

  @Column(nullable = false)
  private String repositoryUrl;

  @Column(nullable = false)
  private String commitHash;  // The Git commit hash

  @Enumerated(EnumType.STRING)
  @Column(nullable = false)
  private ExecutionStatus status;

  @Column(nullable = false, updatable = false)
  private Instant startTime;

  @Column
  private Instant completionTime;

  @OneToMany(mappedBy = "pipelineExecution", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
  private List<StageExecutionEntity> stageExecutions;

  public PipelineExecutionEntity() {}

  public PipelineExecutionEntity(PipelineEntity pipeline, String runId, String commitHash, ExecutionStatus status, Instant startTime) {
    this.pipeline = pipeline;
    this.runId = runId;  // âœ… Store CLI-generated runId
    this.repositoryUrl = pipeline.getRepositoryUrl();
    this.commitHash = commitHash;
    this.status = status;
    this.startTime = startTime;
  }

  public Long getId() { return id; }

  public String getRunId() { return runId; }

  public String getCommitHash() { return commitHash; }

  public ExecutionStatus getStatus() { return status; }

  public Instant getStartTime() { return startTime; }

  public Instant getCompletionTime() { return completionTime; }

  public void setStatus(ExecutionStatus status) { this.status = status; }

  public void setCompletionTime(Instant completionTime) { this.completionTime = completionTime; }

  public void setStageExecutions(List<StageExecutionEntity> stageExecutions) { this.stageExecutions = stageExecutions; }

  public String getRepositoryUrl() { return repositoryUrl; }

  public PipelineEntity getPipeline() {
    return pipeline;
  }

}
